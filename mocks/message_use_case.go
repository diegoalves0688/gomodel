// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/diegoalves0688/gomodel/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MessageUseCase is an autogenerated mock type for the MessageUseCase type
type MessageUseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *MessageUseCase) Create(_a0 context.Context, _a1 *domain.Message) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Message) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: _a0, _a1
func (_m *MessageUseCase) FindByID(_a0 context.Context, _a1 uuid.UUID) (*domain.Message, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domain.Message
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Message); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0
func (_m *MessageUseCase) List(_a0 context.Context) ([]domain.Message, error) {
	ret := _m.Called(_a0)

	var r0 []domain.Message
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Message); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
